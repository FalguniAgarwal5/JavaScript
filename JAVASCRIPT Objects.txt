1. var student = {
  name: "David Rayy",
  sclass: "VI",
  rollno: 12
};

console.log(Object.keys(student).join(","));


2.  var student = {
  name: "David Rayy",
  sclass: "VI",
  rollno: 12
};

console.log("Before deleting rollno:");
console.log(student);

delete student.rollno;

console.log("After deleting rollno:");
console.log(student);


3. var student = {
  name: "David Rayy",
  sclass: "VI",
  rollno: 12
};

var length = Object.keys(student).length;
console.log("Length of the object:", length);


4. var library = [
  {author: 'Bill Gates', title: 'The Road Ahead', readingStatus: true},
  {author: 'Steve Jobs', title: 'Walter Isaacson', readingStatus: true},
  {author: 'Suzanne Collins', title: 'Mockingjay: The Final Book of The Hunger Games', readingStatus: false}
];

library.forEach(function(book) {
  console.log(`Title: "${book.title}", Author: ${book.author}, Reading Status: ${book.readingStatus ? "Already read" : "Not read yet"}`);
});


5. class Cylinder {
  constructor(radius, height) {
    this.radius = radius;
    this.height = height;
  }

  getVolume() {
    const volume = Math.PI * Math.pow(this.radius, 2) * this.height;
    return volume.toFixed(4);
  }
}

// Example
let cyl = new Cylinder(3, 5);
console.log("Volume of Cylinder:", cyl.getVolume());

6. function bubbleSort(arr) {
  let len = arr.length;
  for (let i = 0; i < len; i++) {
    for (let j = 0; j < len - i - 1; j++) {
      if (arr[j] > arr[j + 1]) {
        // Swap
        let temp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = temp;
      }
    }
  }
  return arr;
}

// Example
let data = [6, 4, 0, 3, -2, 1];
console.log("Sorted Array:", bubbleSort(data));

7.  function getSubsets(str) {
  let result = [];
  for (let i = 0; i < str.length; i++) {
    for (let j = i + 1; j <= str.length; j++) {
      result.push(str.slice(i, j));
    }
  }
  return result;
}

// Example
console.log(getSubsets("dog"));

8.  function showTime() {
  const now = new Date();
  const time = now.toLocaleTimeString('en-GB'); // "HH:MM:SS" format
  console.log(time);
}

setInterval(showTime, 1000); // Runs every second


9. class Circle {
  constructor(radius) {
    this.radius = radius;
  }

  getArea() {
    return (Math.PI * this.radius * this.radius).toFixed(2);
  }

  getPerimeter() {
    return (2 * Math.PI * this.radius).toFixed(2);
  }
}

// Example: User enters radius = 5
let radius = 5;
let circle = new Circle(radius);

console.log("Area of Circle:", circle.getArea());
console.log("Perimeter of Circle:", circle.getPerimeter());

10. var library = [
  { title: 'The Road Ahead', author: 'Bill Gates', libraryID: 1254 },
  { title: 'Walter Isaacson', author: 'Steve Jobs', libraryID: 4264 },
  { title: 'Mockingjay: The Final Book of The Hunger Games', author: 'Suzanne Collins', libraryID: 3245 }
];

library.sort(function(a, b) {
  return b.libraryID - a.libraryID; // Descending order
});

console.log(library);

11. function all_properties(obj) {
  let result = [];
  for (let prop in obj) {
    if (typeof obj[prop] === "function") {
      result.push(prop);
    }
  }
  return result;
}

// Test Data
console.log(all_properties(Array));

function all_methods(obj) {
  let props = new Set();
  let currentObj = obj;

  do {
    Object.getOwnPropertyNames(currentObj).forEach(prop => {
      if (typeof obj[prop] === 'function') props.add(prop);
    });
  } while (currentObj = Object.getPrototypeOf(currentObj));

  return Array.from(props);
}

// Test
console.log(all_methods(Array));


12. function parse_URL(url) {
  let a = document.createElement("a");
  a.href = url;

  let params = {};
  a.search.replace(/^\?/, '').split('&').forEach(param => {
    if (param) {
      let [key, value] = param.split('=');
      params[decodeURIComponent(key)] = decodeURIComponent(value || '');
    }
  });

  return {
    source: url,
    protocol: a.protocol.replace(':', ''),
    host: a.hostname,
    port: a.port,
    query: a.search,
    params: params,
    file: (a.pathname.match(/\/([^\/?#]+)$/i) || [,''])[1],
    hash: a.hash.replace('#', ''),
    path: a.pathname.replace(/^([^\/])/, '/$1'),
    relative: a.pathname + a.search + a.hash,
    segments: a.pathname.replace(/^\//, '').split('/')
  };
}

// Test Data
console.log(parse_URL('https://github.com/pubnub/python/search?utf8=%E2%9C%93&q=python'));