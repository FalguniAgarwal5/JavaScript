JAVASCRIPT RECURSION

6. Fibonacci Numbers

function getFibonacci(n) {
  let fib = [0, 1]; // Step 1

  for (let i = 2; i < n; i++) { // Step 2
    fib[i] = fib[i - 1] + fib[i - 2]; // Step 3
  }

  return fib.slice(0, n); // Step 4
}

// Example: print first 10 Fibonacci numbers
console.log(getFibonacci(10));


1. function factorial(n) {
  if (n < 0) return "Factorial not defined for negative numbers.";
  let result = 1;
  for (let i = 2; i <= n; i++) {
    result *= i;
  }
  return result;
}

// Example
console.log(factorial(5)); 

2. function gcd(a, b) {
  while (b !== 0) {
    let temp = b;
    b = a % b;
    a = temp;
  }
  return a;
}

// Example
console.log(gcd(12, 8)); 

3. function range(x, y) {
  let result = [];
  for (let i = x + 1; i < y; i++) {
    result.push(i);
  }
  return result;
}

// Example
console.log(range(2, 9)); 

4. function sumArray(arr) {
  return arr.reduce((sum, current) => sum + current, 0);
}

// Example
let array = [1, 2, 3, 4, 5, 6];
console.log(sumArray(array)); 

5. function exponent(base, exp) {
  return Math.pow(base, exp);
}

// Example
console.log(exponent(8, 2)); 

7. function isEven(num) {
  return num % 2 === 0;
}

// Example
console.log(isEven(4)); 
console.log(isEven(7)); 

8.  function binarySearch(arr, target) {
  let left = 0;
  let right = arr.length - 1;

  while (left <= right) {
    let mid = Math.floor((left + right) / 2);
    
    if (arr[mid] === target) return mid;
    else if (arr[mid] < target) left = mid + 1;
    else right = mid - 1;
  }

  return -1; // Not found
}

// Example
let sampleArray = [0, 1, 2, 3, 4, 5, 6];
console.log(binarySearch(sampleArray, 5));

9. function mergeSort(arr) {
  if (arr.length <= 1) return arr;

  const mid = Math.floor(arr.length / 2);
  const left = mergeSort(arr.slice(0, mid));
  const right = mergeSort(arr.slice(mid));

  return merge(left, right);
}

function merge(left, right) {
  let result = [];
  let i = 0, j = 0;

  while (i < left.length && j < right.length) {
    if (left[i] < right[j]) result.push(left[i++]);
    else result.push(right[j++]);
  }

  return result.concat(left.slice(i)).concat(right.slice(j));
}

// Example
let unsortedArray = [34, 7, 23, 32, 5, 62];
console.log(mergeSort(unsortedArray)); 